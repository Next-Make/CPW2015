
Next_Make_CPW_2015.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000536  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  000005ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001a5  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000125  00000000  00000000  00000787  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000179  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00000a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001af  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000011a  00000000  00000000  00000c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	3c d0       	rcall	.+120    	; 0xa8 <main>
  30:	80 c2       	rjmp	.+1280   	; 0x532 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <displayAsBinary>:
#include <util/delay.h>

// num is a number from 0 to 255
void displayAsBinary(int num)
{
	PORTA = 0b11111110;
  34:	2e ef       	ldi	r18, 0xFE	; 254
  36:	2b bb       	out	0x1b, r18	; 27
	PORTB = 0b00000110;
  38:	26 e0       	ldi	r18, 0x06	; 6
  3a:	28 bb       	out	0x18, r18	; 24
	if(num >= 128) {
  3c:	80 38       	cpi	r24, 0x80	; 128
  3e:	91 05       	cpc	r25, r1
  40:	1c f0       	brlt	.+6      	; 0x48 <__SREG__+0x9>
		PORTB &= 0b11111011;
  42:	c2 98       	cbi	0x18, 2	; 24
		num -= 128;
  44:	80 58       	subi	r24, 0x80	; 128
  46:	91 09       	sbc	r25, r1
	}
	if(num >= 64) {
  48:	80 34       	cpi	r24, 0x40	; 64
  4a:	91 05       	cpc	r25, r1
  4c:	1c f0       	brlt	.+6      	; 0x54 <__SREG__+0x15>
		PORTB &= 0b11111101;
  4e:	c1 98       	cbi	0x18, 1	; 24
		num -= 64;
  50:	80 54       	subi	r24, 0x40	; 64
  52:	91 09       	sbc	r25, r1
	}
	if(num >= 32) {
  54:	80 32       	cpi	r24, 0x20	; 32
  56:	91 05       	cpc	r25, r1
  58:	24 f0       	brlt	.+8      	; 0x62 <__SREG__+0x23>
		PORTA &= 0b01111110;
  5a:	2b b3       	in	r18, 0x1b	; 27
  5c:	2e 77       	andi	r18, 0x7E	; 126
  5e:	2b bb       	out	0x1b, r18	; 27
		num -= 32;
  60:	80 97       	sbiw	r24, 0x20	; 32
	}
	if(num >= 16) {
  62:	80 31       	cpi	r24, 0x10	; 16
  64:	91 05       	cpc	r25, r1
  66:	24 f0       	brlt	.+8      	; 0x70 <__SREG__+0x31>
		PORTA &= 0b10111110;
  68:	2b b3       	in	r18, 0x1b	; 27
  6a:	2e 7b       	andi	r18, 0xBE	; 190
  6c:	2b bb       	out	0x1b, r18	; 27
		num -= 16;
  6e:	40 97       	sbiw	r24, 0x10	; 16
	}
	if(num >= 8) {
  70:	88 30       	cpi	r24, 0x08	; 8
  72:	91 05       	cpc	r25, r1
  74:	24 f0       	brlt	.+8      	; 0x7e <__SREG__+0x3f>
		PORTA &= 0b11011110;
  76:	2b b3       	in	r18, 0x1b	; 27
  78:	2e 7d       	andi	r18, 0xDE	; 222
  7a:	2b bb       	out	0x1b, r18	; 27
		num -= 8;
  7c:	08 97       	sbiw	r24, 0x08	; 8
	}
	if(num >= 4) {
  7e:	84 30       	cpi	r24, 0x04	; 4
  80:	91 05       	cpc	r25, r1
  82:	24 f0       	brlt	.+8      	; 0x8c <__SREG__+0x4d>
		PORTA &= 0b11101110;
  84:	2b b3       	in	r18, 0x1b	; 27
  86:	2e 7e       	andi	r18, 0xEE	; 238
  88:	2b bb       	out	0x1b, r18	; 27
		num -= 4;
  8a:	04 97       	sbiw	r24, 0x04	; 4
	}
	if(num >= 2) {
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	91 05       	cpc	r25, r1
  90:	24 f0       	brlt	.+8      	; 0x9a <__SREG__+0x5b>
		PORTA &= 0b11110110;
  92:	2b b3       	in	r18, 0x1b	; 27
  94:	26 7f       	andi	r18, 0xF6	; 246
  96:	2b bb       	out	0x1b, r18	; 27
		num -= 2;
  98:	02 97       	sbiw	r24, 0x02	; 2
	}
	if(num >= 1) {
  9a:	18 16       	cp	r1, r24
  9c:	19 06       	cpc	r1, r25
  9e:	1c f4       	brge	.+6      	; 0xa6 <__SREG__+0x67>
		PORTA &= 0b11111010;
  a0:	8b b3       	in	r24, 0x1b	; 27
  a2:	8a 7f       	andi	r24, 0xFA	; 250
  a4:	8b bb       	out	0x1b, r24	; 27
  a6:	08 95       	ret

000000a8 <main>:
}

int main(void)
{
	// These set whether our pins are input (0) or output (1) for port A and B
	DDRA = 0b11111110;
  a8:	8e ef       	ldi	r24, 0xFE	; 254
  aa:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b00000110;
  ac:	86 e0       	ldi	r24, 0x06	; 6
  ae:	87 bb       	out	0x17, r24	; 23
	
	// ADC enable
	ADCSRA |= 1 << ADEN;
  b0:	37 9a       	sbi	0x06, 7	; 6
	
	// ADC start conversion
	ADCSRA |= 1 << ADSC;
  b2:	36 9a       	sbi	0x06, 6	; 6
	
	// ADC auto trigger enable
	ADCSRA |= 1 << ADATE;
  b4:	35 9a       	sbi	0x06, 5	; 6
	
	// Divide clock frequency by 128 because ADCs freak out at 8MHz
	ADCSRA |= 0b00000111;
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	87 60       	ori	r24, 0x07	; 7
  ba:	86 b9       	out	0x06, r24	; 6
	
	// Enable right shift (throws out 2 least significant digits!)
	ADCSRB |= 1 << ADLAR;
  bc:	1c 9a       	sbi	0x03, 4	; 3
	
	// Our initial temperature output. Stripy!
	float output = 0b10101010;
  be:	0f 2e       	mov	r0, r31
  c0:	c1 2c       	mov	r12, r1
  c2:	d1 2c       	mov	r13, r1
  c4:	fa e2       	ldi	r31, 0x2A	; 42
  c6:	ef 2e       	mov	r14, r31
  c8:	f3 e4       	ldi	r31, 0x43	; 67
  ca:	ff 2e       	mov	r15, r31
  cc:	f0 2d       	mov	r31, r0
		// Sanoj, our supreme leader
		// In Sanoj we trust
		
		// ADCH should grab the temperature
		// Do a moving average because it looks gross otherwise
		output = 0.5 * output + 0.5 * ADCH;
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	5f e3       	ldi	r21, 0x3F	; 63
  d6:	c7 01       	movw	r24, r14
  d8:	b6 01       	movw	r22, r12
  da:	c0 d1       	rcall	.+896    	; 0x45c <__mulsf3>
  dc:	6b 01       	movw	r12, r22
  de:	7c 01       	movw	r14, r24
  e0:	65 b1       	in	r22, 0x05	; 5
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	2d d1       	rcall	.+602    	; 0x344 <__floatsisf>
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	5f e3       	ldi	r21, 0x3F	; 63
  f2:	b4 d1       	rcall	.+872    	; 0x45c <__mulsf3>
  f4:	9b 01       	movw	r18, r22
  f6:	ac 01       	movw	r20, r24
  f8:	c7 01       	movw	r24, r14
  fa:	b6 01       	movw	r22, r12
  fc:	24 d0       	rcall	.+72     	; 0x146 <__addsf3>
  fe:	6b 01       	movw	r12, r22
 100:	7c 01       	movw	r14, r24
		
		// VOUT = TC*TA + V0C
		// TA = (VOUT - V0C) / TC
		// We also need to convert the output back to a voltage
		TA = ((output / 255 * 5) - V0C) / TC;
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	4f e7       	ldi	r20, 0x7F	; 127
 108:	53 e4       	ldi	r21, 0x43	; 67
 10a:	81 d0       	rcall	.+258    	; 0x20e <__divsf3>
 10c:	20 e0       	ldi	r18, 0x00	; 0
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	40 ea       	ldi	r20, 0xA0	; 160
 112:	50 e4       	ldi	r21, 0x40	; 64
 114:	a3 d1       	rcall	.+838    	; 0x45c <__mulsf3>
 116:	2d ec       	ldi	r18, 0xCD	; 205
 118:	3c ec       	ldi	r19, 0xCC	; 204
 11a:	4c ec       	ldi	r20, 0xCC	; 204
 11c:	5e e3       	ldi	r21, 0x3E	; 62
 11e:	12 d0       	rcall	.+36     	; 0x144 <__subsf3>
 120:	27 e7       	ldi	r18, 0x77	; 119
 122:	3e eb       	ldi	r19, 0xBE	; 190
 124:	4f e9       	ldi	r20, 0x9F	; 159
 126:	5c e3       	ldi	r21, 0x3C	; 60
 128:	72 d0       	rcall	.+228    	; 0x20e <__divsf3>
		displayAsBinary((int)(TA));
 12a:	d9 d0       	rcall	.+434    	; 0x2de <__fixsfsi>
 12c:	cb 01       	movw	r24, r22
 12e:	82 df       	rcall	.-252    	; 0x34 <displayAsBinary>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	80 e7       	ldi	r24, 0x70	; 112
 134:	92 e0       	ldi	r25, 0x02	; 2
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x8e>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x98>
 140:	00 00       	nop
 142:	c5 cf       	rjmp	.-118    	; 0xce <main+0x26>

00000144 <__subsf3>:
 144:	50 58       	subi	r21, 0x80	; 128

00000146 <__addsf3>:
 146:	bb 27       	eor	r27, r27
 148:	aa 27       	eor	r26, r26
 14a:	0e d0       	rcall	.+28     	; 0x168 <__addsf3x>
 14c:	4d c1       	rjmp	.+666    	; 0x3e8 <__fp_round>
 14e:	3e d1       	rcall	.+636    	; 0x3cc <__fp_pscA>
 150:	30 f0       	brcs	.+12     	; 0x15e <__addsf3+0x18>
 152:	43 d1       	rcall	.+646    	; 0x3da <__fp_pscB>
 154:	20 f0       	brcs	.+8      	; 0x15e <__addsf3+0x18>
 156:	31 f4       	brne	.+12     	; 0x164 <__addsf3+0x1e>
 158:	9f 3f       	cpi	r25, 0xFF	; 255
 15a:	11 f4       	brne	.+4      	; 0x160 <__addsf3+0x1a>
 15c:	1e f4       	brtc	.+6      	; 0x164 <__addsf3+0x1e>
 15e:	33 c1       	rjmp	.+614    	; 0x3c6 <__fp_nan>
 160:	0e f4       	brtc	.+2      	; 0x164 <__addsf3+0x1e>
 162:	e0 95       	com	r30
 164:	e7 fb       	bst	r30, 7
 166:	29 c1       	rjmp	.+594    	; 0x3ba <__fp_inf>

00000168 <__addsf3x>:
 168:	e9 2f       	mov	r30, r25
 16a:	4f d1       	rcall	.+670    	; 0x40a <__fp_split3>
 16c:	80 f3       	brcs	.-32     	; 0x14e <__addsf3+0x8>
 16e:	ba 17       	cp	r27, r26
 170:	62 07       	cpc	r22, r18
 172:	73 07       	cpc	r23, r19
 174:	84 07       	cpc	r24, r20
 176:	95 07       	cpc	r25, r21
 178:	18 f0       	brcs	.+6      	; 0x180 <__addsf3x+0x18>
 17a:	71 f4       	brne	.+28     	; 0x198 <__addsf3x+0x30>
 17c:	9e f5       	brtc	.+102    	; 0x1e4 <__addsf3x+0x7c>
 17e:	67 c1       	rjmp	.+718    	; 0x44e <__fp_zero>
 180:	0e f4       	brtc	.+2      	; 0x184 <__addsf3x+0x1c>
 182:	e0 95       	com	r30
 184:	0b 2e       	mov	r0, r27
 186:	ba 2f       	mov	r27, r26
 188:	a0 2d       	mov	r26, r0
 18a:	0b 01       	movw	r0, r22
 18c:	b9 01       	movw	r22, r18
 18e:	90 01       	movw	r18, r0
 190:	0c 01       	movw	r0, r24
 192:	ca 01       	movw	r24, r20
 194:	a0 01       	movw	r20, r0
 196:	11 24       	eor	r1, r1
 198:	ff 27       	eor	r31, r31
 19a:	59 1b       	sub	r21, r25
 19c:	99 f0       	breq	.+38     	; 0x1c4 <__addsf3x+0x5c>
 19e:	59 3f       	cpi	r21, 0xF9	; 249
 1a0:	50 f4       	brcc	.+20     	; 0x1b6 <__addsf3x+0x4e>
 1a2:	50 3e       	cpi	r21, 0xE0	; 224
 1a4:	68 f1       	brcs	.+90     	; 0x200 <__addsf3x+0x98>
 1a6:	1a 16       	cp	r1, r26
 1a8:	f0 40       	sbci	r31, 0x00	; 0
 1aa:	a2 2f       	mov	r26, r18
 1ac:	23 2f       	mov	r18, r19
 1ae:	34 2f       	mov	r19, r20
 1b0:	44 27       	eor	r20, r20
 1b2:	58 5f       	subi	r21, 0xF8	; 248
 1b4:	f3 cf       	rjmp	.-26     	; 0x19c <__addsf3x+0x34>
 1b6:	46 95       	lsr	r20
 1b8:	37 95       	ror	r19
 1ba:	27 95       	ror	r18
 1bc:	a7 95       	ror	r26
 1be:	f0 40       	sbci	r31, 0x00	; 0
 1c0:	53 95       	inc	r21
 1c2:	c9 f7       	brne	.-14     	; 0x1b6 <__addsf3x+0x4e>
 1c4:	7e f4       	brtc	.+30     	; 0x1e4 <__addsf3x+0x7c>
 1c6:	1f 16       	cp	r1, r31
 1c8:	ba 0b       	sbc	r27, r26
 1ca:	62 0b       	sbc	r22, r18
 1cc:	73 0b       	sbc	r23, r19
 1ce:	84 0b       	sbc	r24, r20
 1d0:	ba f0       	brmi	.+46     	; 0x200 <__addsf3x+0x98>
 1d2:	91 50       	subi	r25, 0x01	; 1
 1d4:	a1 f0       	breq	.+40     	; 0x1fe <__addsf3x+0x96>
 1d6:	ff 0f       	add	r31, r31
 1d8:	bb 1f       	adc	r27, r27
 1da:	66 1f       	adc	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	88 1f       	adc	r24, r24
 1e0:	c2 f7       	brpl	.-16     	; 0x1d2 <__addsf3x+0x6a>
 1e2:	0e c0       	rjmp	.+28     	; 0x200 <__addsf3x+0x98>
 1e4:	ba 0f       	add	r27, r26
 1e6:	62 1f       	adc	r22, r18
 1e8:	73 1f       	adc	r23, r19
 1ea:	84 1f       	adc	r24, r20
 1ec:	48 f4       	brcc	.+18     	; 0x200 <__addsf3x+0x98>
 1ee:	87 95       	ror	r24
 1f0:	77 95       	ror	r23
 1f2:	67 95       	ror	r22
 1f4:	b7 95       	ror	r27
 1f6:	f7 95       	ror	r31
 1f8:	9e 3f       	cpi	r25, 0xFE	; 254
 1fa:	08 f0       	brcs	.+2      	; 0x1fe <__addsf3x+0x96>
 1fc:	b3 cf       	rjmp	.-154    	; 0x164 <__addsf3+0x1e>
 1fe:	93 95       	inc	r25
 200:	88 0f       	add	r24, r24
 202:	08 f0       	brcs	.+2      	; 0x206 <__addsf3x+0x9e>
 204:	99 27       	eor	r25, r25
 206:	ee 0f       	add	r30, r30
 208:	97 95       	ror	r25
 20a:	87 95       	ror	r24
 20c:	08 95       	ret

0000020e <__divsf3>:
 20e:	0c d0       	rcall	.+24     	; 0x228 <__divsf3x>
 210:	eb c0       	rjmp	.+470    	; 0x3e8 <__fp_round>
 212:	e3 d0       	rcall	.+454    	; 0x3da <__fp_pscB>
 214:	40 f0       	brcs	.+16     	; 0x226 <__divsf3+0x18>
 216:	da d0       	rcall	.+436    	; 0x3cc <__fp_pscA>
 218:	30 f0       	brcs	.+12     	; 0x226 <__divsf3+0x18>
 21a:	21 f4       	brne	.+8      	; 0x224 <__divsf3+0x16>
 21c:	5f 3f       	cpi	r21, 0xFF	; 255
 21e:	19 f0       	breq	.+6      	; 0x226 <__divsf3+0x18>
 220:	cc c0       	rjmp	.+408    	; 0x3ba <__fp_inf>
 222:	51 11       	cpse	r21, r1
 224:	15 c1       	rjmp	.+554    	; 0x450 <__fp_szero>
 226:	cf c0       	rjmp	.+414    	; 0x3c6 <__fp_nan>

00000228 <__divsf3x>:
 228:	f0 d0       	rcall	.+480    	; 0x40a <__fp_split3>
 22a:	98 f3       	brcs	.-26     	; 0x212 <__divsf3+0x4>

0000022c <__divsf3_pse>:
 22c:	99 23       	and	r25, r25
 22e:	c9 f3       	breq	.-14     	; 0x222 <__divsf3+0x14>
 230:	55 23       	and	r21, r21
 232:	b1 f3       	breq	.-20     	; 0x220 <__divsf3+0x12>
 234:	95 1b       	sub	r25, r21
 236:	55 0b       	sbc	r21, r21
 238:	bb 27       	eor	r27, r27
 23a:	aa 27       	eor	r26, r26
 23c:	62 17       	cp	r22, r18
 23e:	73 07       	cpc	r23, r19
 240:	84 07       	cpc	r24, r20
 242:	38 f0       	brcs	.+14     	; 0x252 <__divsf3_pse+0x26>
 244:	9f 5f       	subi	r25, 0xFF	; 255
 246:	5f 4f       	sbci	r21, 0xFF	; 255
 248:	22 0f       	add	r18, r18
 24a:	33 1f       	adc	r19, r19
 24c:	44 1f       	adc	r20, r20
 24e:	aa 1f       	adc	r26, r26
 250:	a9 f3       	breq	.-22     	; 0x23c <__divsf3_pse+0x10>
 252:	33 d0       	rcall	.+102    	; 0x2ba <__stack+0x5b>
 254:	0e 2e       	mov	r0, r30
 256:	3a f0       	brmi	.+14     	; 0x266 <__stack+0x7>
 258:	e0 e8       	ldi	r30, 0x80	; 128
 25a:	30 d0       	rcall	.+96     	; 0x2bc <__stack+0x5d>
 25c:	91 50       	subi	r25, 0x01	; 1
 25e:	50 40       	sbci	r21, 0x00	; 0
 260:	e6 95       	lsr	r30
 262:	00 1c       	adc	r0, r0
 264:	ca f7       	brpl	.-14     	; 0x258 <__divsf3_pse+0x2c>
 266:	29 d0       	rcall	.+82     	; 0x2ba <__stack+0x5b>
 268:	fe 2f       	mov	r31, r30
 26a:	27 d0       	rcall	.+78     	; 0x2ba <__stack+0x5b>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	88 1f       	adc	r24, r24
 272:	bb 1f       	adc	r27, r27
 274:	26 17       	cp	r18, r22
 276:	37 07       	cpc	r19, r23
 278:	48 07       	cpc	r20, r24
 27a:	ab 07       	cpc	r26, r27
 27c:	b0 e8       	ldi	r27, 0x80	; 128
 27e:	09 f0       	breq	.+2      	; 0x282 <__stack+0x23>
 280:	bb 0b       	sbc	r27, r27
 282:	80 2d       	mov	r24, r0
 284:	bf 01       	movw	r22, r30
 286:	ff 27       	eor	r31, r31
 288:	93 58       	subi	r25, 0x83	; 131
 28a:	5f 4f       	sbci	r21, 0xFF	; 255
 28c:	2a f0       	brmi	.+10     	; 0x298 <__stack+0x39>
 28e:	9e 3f       	cpi	r25, 0xFE	; 254
 290:	51 05       	cpc	r21, r1
 292:	68 f0       	brcs	.+26     	; 0x2ae <__stack+0x4f>
 294:	92 c0       	rjmp	.+292    	; 0x3ba <__fp_inf>
 296:	dc c0       	rjmp	.+440    	; 0x450 <__fp_szero>
 298:	5f 3f       	cpi	r21, 0xFF	; 255
 29a:	ec f3       	brlt	.-6      	; 0x296 <__stack+0x37>
 29c:	98 3e       	cpi	r25, 0xE8	; 232
 29e:	dc f3       	brlt	.-10     	; 0x296 <__stack+0x37>
 2a0:	86 95       	lsr	r24
 2a2:	77 95       	ror	r23
 2a4:	67 95       	ror	r22
 2a6:	b7 95       	ror	r27
 2a8:	f7 95       	ror	r31
 2aa:	9f 5f       	subi	r25, 0xFF	; 255
 2ac:	c9 f7       	brne	.-14     	; 0x2a0 <__stack+0x41>
 2ae:	88 0f       	add	r24, r24
 2b0:	91 1d       	adc	r25, r1
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	97 f9       	bld	r25, 7
 2b8:	08 95       	ret
 2ba:	e1 e0       	ldi	r30, 0x01	; 1
 2bc:	66 0f       	add	r22, r22
 2be:	77 1f       	adc	r23, r23
 2c0:	88 1f       	adc	r24, r24
 2c2:	bb 1f       	adc	r27, r27
 2c4:	62 17       	cp	r22, r18
 2c6:	73 07       	cpc	r23, r19
 2c8:	84 07       	cpc	r24, r20
 2ca:	ba 07       	cpc	r27, r26
 2cc:	20 f0       	brcs	.+8      	; 0x2d6 <__stack+0x77>
 2ce:	62 1b       	sub	r22, r18
 2d0:	73 0b       	sbc	r23, r19
 2d2:	84 0b       	sbc	r24, r20
 2d4:	ba 0b       	sbc	r27, r26
 2d6:	ee 1f       	adc	r30, r30
 2d8:	88 f7       	brcc	.-30     	; 0x2bc <__stack+0x5d>
 2da:	e0 95       	com	r30
 2dc:	08 95       	ret

000002de <__fixsfsi>:
 2de:	04 d0       	rcall	.+8      	; 0x2e8 <__fixunssfsi>
 2e0:	68 94       	set
 2e2:	b1 11       	cpse	r27, r1
 2e4:	b5 c0       	rjmp	.+362    	; 0x450 <__fp_szero>
 2e6:	08 95       	ret

000002e8 <__fixunssfsi>:
 2e8:	98 d0       	rcall	.+304    	; 0x41a <__fp_splitA>
 2ea:	88 f0       	brcs	.+34     	; 0x30e <__fixunssfsi+0x26>
 2ec:	9f 57       	subi	r25, 0x7F	; 127
 2ee:	90 f0       	brcs	.+36     	; 0x314 <__fixunssfsi+0x2c>
 2f0:	b9 2f       	mov	r27, r25
 2f2:	99 27       	eor	r25, r25
 2f4:	b7 51       	subi	r27, 0x17	; 23
 2f6:	a0 f0       	brcs	.+40     	; 0x320 <__fixunssfsi+0x38>
 2f8:	d1 f0       	breq	.+52     	; 0x32e <__fixunssfsi+0x46>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	88 1f       	adc	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	1a f0       	brmi	.+6      	; 0x30a <__fixunssfsi+0x22>
 304:	ba 95       	dec	r27
 306:	c9 f7       	brne	.-14     	; 0x2fa <__fixunssfsi+0x12>
 308:	12 c0       	rjmp	.+36     	; 0x32e <__fixunssfsi+0x46>
 30a:	b1 30       	cpi	r27, 0x01	; 1
 30c:	81 f0       	breq	.+32     	; 0x32e <__fixunssfsi+0x46>
 30e:	9f d0       	rcall	.+318    	; 0x44e <__fp_zero>
 310:	b1 e0       	ldi	r27, 0x01	; 1
 312:	08 95       	ret
 314:	9c c0       	rjmp	.+312    	; 0x44e <__fp_zero>
 316:	67 2f       	mov	r22, r23
 318:	78 2f       	mov	r23, r24
 31a:	88 27       	eor	r24, r24
 31c:	b8 5f       	subi	r27, 0xF8	; 248
 31e:	39 f0       	breq	.+14     	; 0x32e <__fixunssfsi+0x46>
 320:	b9 3f       	cpi	r27, 0xF9	; 249
 322:	cc f3       	brlt	.-14     	; 0x316 <__fixunssfsi+0x2e>
 324:	86 95       	lsr	r24
 326:	77 95       	ror	r23
 328:	67 95       	ror	r22
 32a:	b3 95       	inc	r27
 32c:	d9 f7       	brne	.-10     	; 0x324 <__fixunssfsi+0x3c>
 32e:	3e f4       	brtc	.+14     	; 0x33e <__fixunssfsi+0x56>
 330:	90 95       	com	r25
 332:	80 95       	com	r24
 334:	70 95       	com	r23
 336:	61 95       	neg	r22
 338:	7f 4f       	sbci	r23, 0xFF	; 255
 33a:	8f 4f       	sbci	r24, 0xFF	; 255
 33c:	9f 4f       	sbci	r25, 0xFF	; 255
 33e:	08 95       	ret

00000340 <__floatunsisf>:
 340:	e8 94       	clt
 342:	09 c0       	rjmp	.+18     	; 0x356 <__floatsisf+0x12>

00000344 <__floatsisf>:
 344:	97 fb       	bst	r25, 7
 346:	3e f4       	brtc	.+14     	; 0x356 <__floatsisf+0x12>
 348:	90 95       	com	r25
 34a:	80 95       	com	r24
 34c:	70 95       	com	r23
 34e:	61 95       	neg	r22
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	8f 4f       	sbci	r24, 0xFF	; 255
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	99 23       	and	r25, r25
 358:	a9 f0       	breq	.+42     	; 0x384 <__floatsisf+0x40>
 35a:	f9 2f       	mov	r31, r25
 35c:	96 e9       	ldi	r25, 0x96	; 150
 35e:	bb 27       	eor	r27, r27
 360:	93 95       	inc	r25
 362:	f6 95       	lsr	r31
 364:	87 95       	ror	r24
 366:	77 95       	ror	r23
 368:	67 95       	ror	r22
 36a:	b7 95       	ror	r27
 36c:	f1 11       	cpse	r31, r1
 36e:	f8 cf       	rjmp	.-16     	; 0x360 <__floatsisf+0x1c>
 370:	fa f4       	brpl	.+62     	; 0x3b0 <__floatsisf+0x6c>
 372:	bb 0f       	add	r27, r27
 374:	11 f4       	brne	.+4      	; 0x37a <__floatsisf+0x36>
 376:	60 ff       	sbrs	r22, 0
 378:	1b c0       	rjmp	.+54     	; 0x3b0 <__floatsisf+0x6c>
 37a:	6f 5f       	subi	r22, 0xFF	; 255
 37c:	7f 4f       	sbci	r23, 0xFF	; 255
 37e:	8f 4f       	sbci	r24, 0xFF	; 255
 380:	9f 4f       	sbci	r25, 0xFF	; 255
 382:	16 c0       	rjmp	.+44     	; 0x3b0 <__floatsisf+0x6c>
 384:	88 23       	and	r24, r24
 386:	11 f0       	breq	.+4      	; 0x38c <__floatsisf+0x48>
 388:	96 e9       	ldi	r25, 0x96	; 150
 38a:	11 c0       	rjmp	.+34     	; 0x3ae <__floatsisf+0x6a>
 38c:	77 23       	and	r23, r23
 38e:	21 f0       	breq	.+8      	; 0x398 <__floatsisf+0x54>
 390:	9e e8       	ldi	r25, 0x8E	; 142
 392:	87 2f       	mov	r24, r23
 394:	76 2f       	mov	r23, r22
 396:	05 c0       	rjmp	.+10     	; 0x3a2 <__floatsisf+0x5e>
 398:	66 23       	and	r22, r22
 39a:	71 f0       	breq	.+28     	; 0x3b8 <__floatsisf+0x74>
 39c:	96 e8       	ldi	r25, 0x86	; 134
 39e:	86 2f       	mov	r24, r22
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	2a f0       	brmi	.+10     	; 0x3b0 <__floatsisf+0x6c>
 3a6:	9a 95       	dec	r25
 3a8:	66 0f       	add	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	88 1f       	adc	r24, r24
 3ae:	da f7       	brpl	.-10     	; 0x3a6 <__floatsisf+0x62>
 3b0:	88 0f       	add	r24, r24
 3b2:	96 95       	lsr	r25
 3b4:	87 95       	ror	r24
 3b6:	97 f9       	bld	r25, 7
 3b8:	08 95       	ret

000003ba <__fp_inf>:
 3ba:	97 f9       	bld	r25, 7
 3bc:	9f 67       	ori	r25, 0x7F	; 127
 3be:	80 e8       	ldi	r24, 0x80	; 128
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	08 95       	ret

000003c6 <__fp_nan>:
 3c6:	9f ef       	ldi	r25, 0xFF	; 255
 3c8:	80 ec       	ldi	r24, 0xC0	; 192
 3ca:	08 95       	ret

000003cc <__fp_pscA>:
 3cc:	00 24       	eor	r0, r0
 3ce:	0a 94       	dec	r0
 3d0:	16 16       	cp	r1, r22
 3d2:	17 06       	cpc	r1, r23
 3d4:	18 06       	cpc	r1, r24
 3d6:	09 06       	cpc	r0, r25
 3d8:	08 95       	ret

000003da <__fp_pscB>:
 3da:	00 24       	eor	r0, r0
 3dc:	0a 94       	dec	r0
 3de:	12 16       	cp	r1, r18
 3e0:	13 06       	cpc	r1, r19
 3e2:	14 06       	cpc	r1, r20
 3e4:	05 06       	cpc	r0, r21
 3e6:	08 95       	ret

000003e8 <__fp_round>:
 3e8:	09 2e       	mov	r0, r25
 3ea:	03 94       	inc	r0
 3ec:	00 0c       	add	r0, r0
 3ee:	11 f4       	brne	.+4      	; 0x3f4 <__fp_round+0xc>
 3f0:	88 23       	and	r24, r24
 3f2:	52 f0       	brmi	.+20     	; 0x408 <__fp_round+0x20>
 3f4:	bb 0f       	add	r27, r27
 3f6:	40 f4       	brcc	.+16     	; 0x408 <__fp_round+0x20>
 3f8:	bf 2b       	or	r27, r31
 3fa:	11 f4       	brne	.+4      	; 0x400 <__fp_round+0x18>
 3fc:	60 ff       	sbrs	r22, 0
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__fp_round+0x20>
 400:	6f 5f       	subi	r22, 0xFF	; 255
 402:	7f 4f       	sbci	r23, 0xFF	; 255
 404:	8f 4f       	sbci	r24, 0xFF	; 255
 406:	9f 4f       	sbci	r25, 0xFF	; 255
 408:	08 95       	ret

0000040a <__fp_split3>:
 40a:	57 fd       	sbrc	r21, 7
 40c:	90 58       	subi	r25, 0x80	; 128
 40e:	44 0f       	add	r20, r20
 410:	55 1f       	adc	r21, r21
 412:	59 f0       	breq	.+22     	; 0x42a <__fp_splitA+0x10>
 414:	5f 3f       	cpi	r21, 0xFF	; 255
 416:	71 f0       	breq	.+28     	; 0x434 <__fp_splitA+0x1a>
 418:	47 95       	ror	r20

0000041a <__fp_splitA>:
 41a:	88 0f       	add	r24, r24
 41c:	97 fb       	bst	r25, 7
 41e:	99 1f       	adc	r25, r25
 420:	61 f0       	breq	.+24     	; 0x43a <__fp_splitA+0x20>
 422:	9f 3f       	cpi	r25, 0xFF	; 255
 424:	79 f0       	breq	.+30     	; 0x444 <__fp_splitA+0x2a>
 426:	87 95       	ror	r24
 428:	08 95       	ret
 42a:	12 16       	cp	r1, r18
 42c:	13 06       	cpc	r1, r19
 42e:	14 06       	cpc	r1, r20
 430:	55 1f       	adc	r21, r21
 432:	f2 cf       	rjmp	.-28     	; 0x418 <__fp_split3+0xe>
 434:	46 95       	lsr	r20
 436:	f1 df       	rcall	.-30     	; 0x41a <__fp_splitA>
 438:	08 c0       	rjmp	.+16     	; 0x44a <__fp_splitA+0x30>
 43a:	16 16       	cp	r1, r22
 43c:	17 06       	cpc	r1, r23
 43e:	18 06       	cpc	r1, r24
 440:	99 1f       	adc	r25, r25
 442:	f1 cf       	rjmp	.-30     	; 0x426 <__fp_splitA+0xc>
 444:	86 95       	lsr	r24
 446:	71 05       	cpc	r23, r1
 448:	61 05       	cpc	r22, r1
 44a:	08 94       	sec
 44c:	08 95       	ret

0000044e <__fp_zero>:
 44e:	e8 94       	clt

00000450 <__fp_szero>:
 450:	bb 27       	eor	r27, r27
 452:	66 27       	eor	r22, r22
 454:	77 27       	eor	r23, r23
 456:	cb 01       	movw	r24, r22
 458:	97 f9       	bld	r25, 7
 45a:	08 95       	ret

0000045c <__mulsf3>:
 45c:	0a d0       	rcall	.+20     	; 0x472 <__mulsf3x>
 45e:	c4 cf       	rjmp	.-120    	; 0x3e8 <__fp_round>
 460:	b5 df       	rcall	.-150    	; 0x3cc <__fp_pscA>
 462:	28 f0       	brcs	.+10     	; 0x46e <__mulsf3+0x12>
 464:	ba df       	rcall	.-140    	; 0x3da <__fp_pscB>
 466:	18 f0       	brcs	.+6      	; 0x46e <__mulsf3+0x12>
 468:	95 23       	and	r25, r21
 46a:	09 f0       	breq	.+2      	; 0x46e <__mulsf3+0x12>
 46c:	a6 cf       	rjmp	.-180    	; 0x3ba <__fp_inf>
 46e:	ab cf       	rjmp	.-170    	; 0x3c6 <__fp_nan>
 470:	ef cf       	rjmp	.-34     	; 0x450 <__fp_szero>

00000472 <__mulsf3x>:
 472:	cb df       	rcall	.-106    	; 0x40a <__fp_split3>
 474:	a8 f3       	brcs	.-22     	; 0x460 <__mulsf3+0x4>

00000476 <__mulsf3_pse>:
 476:	99 23       	and	r25, r25
 478:	d9 f3       	breq	.-10     	; 0x470 <__mulsf3+0x14>
 47a:	55 23       	and	r21, r21
 47c:	c9 f3       	breq	.-14     	; 0x470 <__mulsf3+0x14>
 47e:	95 0f       	add	r25, r21
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	55 1f       	adc	r21, r21
 484:	aa 27       	eor	r26, r26
 486:	ee 27       	eor	r30, r30
 488:	ff 27       	eor	r31, r31
 48a:	bb 27       	eor	r27, r27
 48c:	00 24       	eor	r0, r0
 48e:	08 94       	sec
 490:	67 95       	ror	r22
 492:	20 f4       	brcc	.+8      	; 0x49c <__mulsf3_pse+0x26>
 494:	e2 0f       	add	r30, r18
 496:	f3 1f       	adc	r31, r19
 498:	b4 1f       	adc	r27, r20
 49a:	0a 1e       	adc	r0, r26
 49c:	22 0f       	add	r18, r18
 49e:	33 1f       	adc	r19, r19
 4a0:	44 1f       	adc	r20, r20
 4a2:	aa 1f       	adc	r26, r26
 4a4:	66 95       	lsr	r22
 4a6:	a9 f7       	brne	.-22     	; 0x492 <__mulsf3_pse+0x1c>
 4a8:	77 95       	ror	r23
 4aa:	30 f4       	brcc	.+12     	; 0x4b8 <__mulsf3_pse+0x42>
 4ac:	f3 0f       	add	r31, r19
 4ae:	b4 1f       	adc	r27, r20
 4b0:	0a 1e       	adc	r0, r26
 4b2:	12 1e       	adc	r1, r18
 4b4:	08 f4       	brcc	.+2      	; 0x4b8 <__mulsf3_pse+0x42>
 4b6:	63 95       	inc	r22
 4b8:	33 0f       	add	r19, r19
 4ba:	44 1f       	adc	r20, r20
 4bc:	aa 1f       	adc	r26, r26
 4be:	22 1f       	adc	r18, r18
 4c0:	76 95       	lsr	r23
 4c2:	99 f7       	brne	.-26     	; 0x4aa <__mulsf3_pse+0x34>
 4c4:	87 95       	ror	r24
 4c6:	20 f4       	brcc	.+8      	; 0x4d0 <__mulsf3_pse+0x5a>
 4c8:	b4 0f       	add	r27, r20
 4ca:	0a 1e       	adc	r0, r26
 4cc:	12 1e       	adc	r1, r18
 4ce:	63 1f       	adc	r22, r19
 4d0:	44 0f       	add	r20, r20
 4d2:	aa 1f       	adc	r26, r26
 4d4:	22 1f       	adc	r18, r18
 4d6:	33 1f       	adc	r19, r19
 4d8:	86 95       	lsr	r24
 4da:	a9 f7       	brne	.-22     	; 0x4c6 <__mulsf3_pse+0x50>
 4dc:	86 2f       	mov	r24, r22
 4de:	71 2d       	mov	r23, r1
 4e0:	60 2d       	mov	r22, r0
 4e2:	11 24       	eor	r1, r1
 4e4:	9f 57       	subi	r25, 0x7F	; 127
 4e6:	50 40       	sbci	r21, 0x00	; 0
 4e8:	8a f0       	brmi	.+34     	; 0x50c <__mulsf3_pse+0x96>
 4ea:	e1 f0       	breq	.+56     	; 0x524 <__mulsf3_pse+0xae>
 4ec:	88 23       	and	r24, r24
 4ee:	4a f0       	brmi	.+18     	; 0x502 <__mulsf3_pse+0x8c>
 4f0:	ee 0f       	add	r30, r30
 4f2:	ff 1f       	adc	r31, r31
 4f4:	bb 1f       	adc	r27, r27
 4f6:	66 1f       	adc	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	88 1f       	adc	r24, r24
 4fc:	91 50       	subi	r25, 0x01	; 1
 4fe:	50 40       	sbci	r21, 0x00	; 0
 500:	a9 f7       	brne	.-22     	; 0x4ec <__mulsf3_pse+0x76>
 502:	9e 3f       	cpi	r25, 0xFE	; 254
 504:	51 05       	cpc	r21, r1
 506:	70 f0       	brcs	.+28     	; 0x524 <__mulsf3_pse+0xae>
 508:	58 cf       	rjmp	.-336    	; 0x3ba <__fp_inf>
 50a:	a2 cf       	rjmp	.-188    	; 0x450 <__fp_szero>
 50c:	5f 3f       	cpi	r21, 0xFF	; 255
 50e:	ec f3       	brlt	.-6      	; 0x50a <__mulsf3_pse+0x94>
 510:	98 3e       	cpi	r25, 0xE8	; 232
 512:	dc f3       	brlt	.-10     	; 0x50a <__mulsf3_pse+0x94>
 514:	86 95       	lsr	r24
 516:	77 95       	ror	r23
 518:	67 95       	ror	r22
 51a:	b7 95       	ror	r27
 51c:	f7 95       	ror	r31
 51e:	e7 95       	ror	r30
 520:	9f 5f       	subi	r25, 0xFF	; 255
 522:	c1 f7       	brne	.-16     	; 0x514 <__mulsf3_pse+0x9e>
 524:	fe 2b       	or	r31, r30
 526:	88 0f       	add	r24, r24
 528:	91 1d       	adc	r25, r1
 52a:	96 95       	lsr	r25
 52c:	87 95       	ror	r24
 52e:	97 f9       	bld	r25, 7
 530:	08 95       	ret

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
